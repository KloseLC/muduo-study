Buffer类 应该是buff传送处理的一个类

成员函数:
    void swap(Buffer& rhs)
  {
    buffer_.swap(rhs.buffer_);
    std::swap(readerIndex_, rhs.readerIndex_);
    std::swap(writerIndex_, rhs.writerIndex_);
  }
  交换buffer_的内容  vector的交换函数
  readerIndex_和writerIndex_的交换
  
  size_t readableBytes() const
  { return writerIndex_ - readerIndex_; }
  返回还有多少可用读取得buff size
  
    size_t writableBytes() const
  { return buffer_.size() - writerIndex_; }
  返回还有多少可以写的buff size
  
    size_t prependableBytes() const
  { return readerIndex_; }
  返回已经读取的buff size
  
    const char* peek() const
  { return begin() + readerIndex_; }
  返回目前的读取位置
  
    const char* findCRLF() const
  {
    // FIXME: replace with memmem()?
    const char* crlf = std::search(peek(), beginWrite(), kCRLF, kCRLF+2);
    return crlf == beginWrite() ? NULL : crlf;
  }
 CRLF不知道是什么?一个static的char数组,findCRLF查找在已读取和已写入之间search CRLF的前两个字节
 找不到返回NULL找到了返回char指针
 
   const char* findCRLF(const char* start) const
  {
    assert(peek() <= start);
    assert(start <= beginWrite());
    // FIXME: replace with memmem()?
    const char* crlf = std::search(start, beginWrite(), kCRLF, kCRLF+2);
    return crlf == beginWrite() ? NULL : crlf;
  }
  一个带参重载,start指针的地址必须是在read和write之间的
  在指定的start区间查找CRLF
 
  const char* findEOL() const
  {
    const void* eol = memchr(peek(), '\n', readableBytes());
    return static_cast<const char*>(eol);
  }
  匹配一个换行符 并返回换行符所在的地址指针,强壮为const char*
  
  
    const char* findEOL(const char* start) const
  {
    assert(peek() <= start);
    assert(start <= beginWrite());
    const void* eol = memchr(start, '\n', beginWrite() - start);
    return static_cast<const char*>(eol);
  }
  重载,start是begin的限制地址
  
  void retrieve(size_t len)
  {
    assert(len <= readableBytes());
    if (len < readableBytes())
    {
      readerIndex_ += len;
    }
    else
    {
      retrieveAll();
    }
  }
  没看出来应用场景  如果传入的len小于readIndex则+=  如果大于,则retrieveAll() readindex和writeIndex 都加8
  后续再分析 
  
  void retrieveUntil(const char* end)
  {
    assert(peek() <= end);
    assert(end <= beginWrite());
    retrieve(end - peek());
  }
  大概是明白了  这是一个纠错的函数,如果位置发生偏移,通过这个函数进行偏移纠错 地址偏移多少的字节
  
    void retrieveInt64()
  {
    retrieve(sizeof(int64_t));
  }
  偏移8个字节
  
  void retrieveInt32()
  {
    retrieve(sizeof(int32_t));
  }
  偏移4个字节
  
  void retrieveInt16()
  {
    retrieve(sizeof(int16_t));
  }
  偏移2个字节
  
  void retrieveInt8()
  {
    retrieve(sizeof(int8_t));
  }
  偏移1个字节  
  
  void retrieveAll()
  {
    readerIndex_ = kCheapPrepend;
    writerIndex_ = kCheapPrepend;
  }
  各加8位
  
  string retrieveAllAsString()
  {
    return retrieveAsString(readableBytes());
  }
  返回偏移的字符串内容,并实现偏移
  
    StringPiece toStringPiece() const
  {
    return StringPiece(peek(), static_cast<int>(readableBytes()));
  }
  返回一个StringPiece的对象
  
    void append(const StringPiece& str)
  {
    append(str.data(), str.size());
  }
  将对象str添加写入
  
    void append(const void* /*restrict*/ data, size_t len)
  {
    append(static_cast<const char*>(data), len);
  }
  
  
   void ensureWritableBytes(size_t len)
  {
    if (writableBytes() < len)
    {
      makeSpace(len);
    }
    assert(writableBytes() >= len);
  }
  如果写入的长度小于指定len长度,则创造一定长度的空间予以补齐
  创建之后写入的长度不能超过指定的len
  
    char* beginWrite()
  { return begin() + writerIndex_; }

  const char* beginWrite() const
  { return begin() + writerIndex_; }
  两个函数都是
  返回write到的最后一个字符的指针
  
  void hasWritten(size_t len)
  {
    assert(len <= writableBytes());
    writerIndex_ += len;
  }
  增加write的长度
  
  void unwrite(size_t len)
  {
    assert(len <= readableBytes());
    writerIndex_ -= len;
  }
  缩减write的长度
  
   void appendInt64(int64_t x)
  {
    int64_t be64 = sockets::hostToNetwork64(x);
    append(&be64, sizeof be64);
  }
  追加写64字节
  
    void appendInt32(int32_t x)
  {
    int32_t be32 = sockets::hostToNetwork32(x);
    append(&be32, sizeof be32);
  }
  追加32位内容
  
  void appendInt16(int16_t x)
  {
    int16_t be16 = sockets::hostToNetwork16(x);
    append(&be16, sizeof be16);
  }
  追加16位内容

  void appendInt8(int8_t x)
  {
    append(&x, sizeof x);
  }
  追加8位内容
  
    int64_t readInt64()
  {
    int64_t result = peekInt64();
    retrieveInt64();
    return result;
  }
  将64位的内容转换成host内容 然后当前readindex偏移64  返回转换位host的int64_t
  
  int32_t readInt32()
  {
    int32_t result = peekInt32();
    retrieveInt32();
    return result;
  }
    将32位的内容转换成host内容 然后当前readindex偏移32  返回转换位host的int32_t
  
    int16_t readInt16()
  {
    int16_t result = peekInt16();
    retrieveInt16();
    return result;
  }
    将16位的内容转换成host内容 然后当前readindex偏移16  返回转换位host的int16_t
  
    int8_t readInt8()
  {
    int8_t result = peekInt8();
    retrieveInt8();
    return result;
  }
    将8位的内容转换成host内容 然后当前readindex偏移8  返回转换位host的int8_t
  
  int64_t peekInt64() const
  {
    assert(readableBytes() >= sizeof(int64_t));
    int64_t be64 = 0;
    ::memcpy(&be64, peek(), sizeof be64);
    return sockets::networkToHost64(be64);
  }
  从read的地方复制到该位置长度64位 相当于初始化位0
  
    int32_t peekInt32() const
  {
    assert(readableBytes() >= sizeof(int32_t));
    int32_t be32 = 0;
    ::memcpy(&be32, peek(), sizeof be32);
    return sockets::networkToHost32(be32);
  }
   从read的地方复制到该位置长度32位 相当于初始化位0
   
  int16_t peekInt16() const
  {
    assert(readableBytes() >= sizeof(int16_t));
    int16_t be16 = 0;
    ::memcpy(&be16, peek(), sizeof be16);
    return sockets::networkToHost16(be16);
  }
   从read的地方复制到该位置长度16位 相当于初始化位0

  int8_t peekInt8() const
  {
    assert(readableBytes() >= sizeof(int8_t));
    int8_t x = *peek();
    return x;
  }
   从read的地方复制到该位置长度8位 相当于初始化位0
  
  
    void prependInt64(int64_t x)
  {
    int64_t be64 = sockets::hostToNetwork64(x);
    prepend(&be64, sizeof be64);
  }
  将当前read的index 前置到len长度处,并将传入的data 复制到这一段buff  总结位将数据覆盖到已经的末端内存中去
  ///
  /// Prepend int32_t using network endian
  ///
  void prependInt32(int32_t x)
  {
    int32_t be32 = sockets::hostToNetwork32(x);
    prepend(&be32, sizeof be32);
  }
  将当前read的index 前置到len长度处,并将传入的data 复制到这一段buff  总结位将数据覆盖到已经的末端内存中去
  void prependInt16(int16_t x)
  {
    int16_t be16 = sockets::hostToNetwork16(x);
    prepend(&be16, sizeof be16);
  }
  将当前read的index 前置到len长度处,并将传入的data 复制到这一段buff  总结位将数据覆盖到已经的末端内存中去
  void prependInt8(int8_t x)
  {
    prepend(&x, sizeof x);
  }
  将当前read的index 前置到len长度处,并将传入的data 复制到这一段buff  总结位将数据覆盖到已经的末端内存中去
  
    void prepend(const void* /*restrict*/ data, size_t len)
  {
    assert(len <= prependableBytes());
    readerIndex_ -= len;
    const char* d = static_cast<const char*>(data);
    std::copy(d, d+len, begin()+readerIndex_);
  }
  将当前read的index 前置到len长度处,并将传入的data 复制到这一段buff  总结位将数据覆盖到已经的末端内存中去
  
    void shrink(size_t reserve)
  {
    // FIXME: use vector::shrink_to_fit() in C++ 11 if possible.
    Buffer other;
    other.ensureWritableBytes(readableBytes()+reserve);
    other.append(toStringPiece());
    swap(other);
  }
  将指定长度的buff进行重新的构造,并追加写入str 
  
    size_t internalCapacity() const
  {
    return buffer_.capacity();
  }返回容器的容量
  
ssize_t readFd(int fd, int* savedErrno);
针对fd来进行多段的buff进行read

int readv(int fd, const struct iovec *vector, int count);
int writev(int fd, const struct iovec *vector, int count);
这两个函数位散布读和聚集写,主要是为了在单个函数内,实现多段缓存的读取和写入  
struct iovec定义了一个向量元素。通常，这个结构用作一个多元素的数组。对于每一个传输的元素，指针成员iov_base指向一个缓冲区，这个缓冲区是存放的是readv所接收的数据或是writev将要发送的数据。成员iov_len在各种情况下分别确定了接收的最大长度以及实际写入的长度。
这个类是一个习惯用于数组变量的结构体,保存指针和buff长度,配合readv和writev来进行散布读和聚集写

在readv或者writev传入数组指针和元素个数,就会把所有的数据全部读取和写入完成

  char* begin()
  { return &*buffer_.begin(); }

  const char* begin() const
  { return &*buffer_.begin(); }
  
    void makeSpace(size_t len)
  {
    if (writableBytes() + prependableBytes() < len + kCheapPrepend)
    {
      // FIXME: move readable data
      buffer_.resize(writerIndex_+len);
    }
    else
    {
      // move readable data to the front, make space inside buffer
      assert(kCheapPrepend < readerIndex_);
      size_t readable = readableBytes();
      std::copy(begin()+readerIndex_,
                begin()+writerIndex_,
                begin()+kCheapPrepend);
      readerIndex_ = kCheapPrepend;
      writerIndex_ = readerIndex_ + readable;
      assert(readable == readableBytes());
    }
  }
  
  重构现有的bufff空间
  
  函数成员:
      std::vector<char> buffer_;  主要的buffer内容 可以称之为缓存
      size_t readerIndex_;         read的标记  相对于begin
      size_t writerIndex_;         write的标记 相对于begin
      
      static const char kCRLF[];  可以被指定的字符串字段,用来搜索buffer中是否存在
      
  
  
  




  
  
  
