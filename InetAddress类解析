工具函数:
  const struct sockaddr* sockaddr_cast(const struct sockaddr_in6* addr);
  此函数将sockaddr_in6*强转为系统可用的sockaddr* 系统级的接口调用sockaddr*使用比较多
  
  
include <netinet/in.h>
struct sockaddr {  
    unsigned short    sa_family;    // 2 bytes address family, AF_xxx  
    char              sa_data[14];     // 14 bytes of protocol address  
};  
  
// IPv4 AF_INET sockets:  
  
struct sockaddr_in {  
    short            sin_family;       // 2 bytes e.g. AF_INET, AF_INET6  
    unsigned short   sin_port;    // 2 bytes e.g. htons(3490)  
    struct in_addr   sin_addr;     // 4 bytes see struct in_addr, below  
    char             sin_zero[8];     // 8 bytes zero this if you want to  
};  
  
struct in_addr {  
    unsigned long s_addr;          // 4 bytes load with inet_pton()  
};

注释中标明了属性的含义及其字节大小，这两个结构体一样大，都是16个字节，而且都有family属性，不同的是：
sockaddr用其余14个字节来表示sa_data，而sockaddr_in把14个字节拆分成sin_port, sin_addr和sin_zero
分别表示端口、ip地址。sin_zero用来填充字节使sockaddr_in和sockaddr保持一样大小。

sockaddr和sockaddr_in包含的数据都是一样的，但他们在使用上有区别：
程序员不应操作sockaddr，sockaddr是给操作系统用的
程序员应使用sockaddr_in来表示地址，sockaddr_in区分了地址和端口，使用更方便。
一般的用法为：
程序员把类型、ip地址、端口填充sockaddr_in结构体，然后强制转换成sockaddr，作为参数传递给系统调用函数

static_assert(sizeof(InetAddress) == sizeof(struct sockaddr_in6),
              "InetAddress is same size as sockaddr_in6");
static_assert(offsetof(sockaddr_in, sin_family) == 0, "sin_family offset 0");
static_assert(offsetof(sockaddr_in6, sin6_family) == 0, "sin6_family offset 0");
static_assert(offsetof(sockaddr_in, sin_port) == 2, "sin_port offset 2");
static_assert(offsetof(sockaddr_in6, sin6_port) == 2, "sin6_port offset 2");

检查当前系统中 InetAddress和sockaddr_in6的长度比  是否合乎预期的一致

这是一个ip地址类,属于ip和端口的管理  
还包含ip的验证,大小端各类型cpu的数据处理方法兼容

InetAddress类成员函数:

  explicit InetAddress(uint16_t port = 0, bool loopbackOnly = false, bool ipv6 = false)
  构造函数
  关键字 explicit 作用：explicit构造函数是用来防止隐式转换的 
  比方说, class_type的构造函数未使用explicit,则class_type A a = 10是合法的,这行代码使用了隐式的赋值构造函数
  如果使用explicit 在class_type(int _x),则就不合法了,它强调拷贝赋值函数必须是显式的,例如 class_type(10)

  InetAddress(StringArg ip, uint16_t port, bool ipv6 = false)
  简单判断一下ip地址和端口是否合法,分为ipv4和ipv6
  
  explicit InetAddress(const struct sockaddr_in& addr)
 
  explicit InetAddress(const struct sockaddr_in6& addr)
  
  sa_family_t family() const { return addr_.sin_family; }
  获取协议族类型
  
  string toIp() const
  返回IP
  
  string toIpPort() const
  返回ip端口
  
  uint16_t toPort() const
  返回端口
  
  const struct sockaddr* getSockAddr() const { return sockets::sockaddr_cast(&addr6_); }
  
  void setSockAddrInet6(const struct sockaddr_in6& addr6) { addr6_ = addr6; }
  设置socketaddress6的数据变量
  
  uint32_t ipNetEndian() const;
  返回一个二进制的网路段的ip信息
  
  uint16_t portNetEndian() const { return addr_.sin_port; }
  返回的是一各端口的信息
  
  static bool resolve(StringArg hostname, InetAddress* result)
  判断域名和地址,并返回
  
  void setScopeId(uint32_t scope_id)
  设置ipv6的scopeid
  
  
  成员变量:
    union
  {
    struct sockaddr_in addr_;
    struct sockaddr_in6 addr6_;
  };
  
  socket地址的联合
    





