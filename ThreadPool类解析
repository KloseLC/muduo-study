ThreadPool::ThreadPool(const string& nameArg)
  : mutex_(),
    notEmpty_(mutex_),
    notFull_(mutex_),
    name_(nameArg),
    maxQueueSize_(0),
    running_(false)
{
}
构造初始化

ThreadPool::~ThreadPool()
{
  if (running_)
  {
    stop();
  }
}
析构终止服务

void ThreadPool::start(int numThreads)
{
  assert(threads_.empty());
  running_ = true;
  threads_.reserve(numThreads); 构造指定数量的容器
  for (int i = 0; i < numThreads; ++i)
  {
    char id[32];
    snprintf(id, sizeof id, "%d", i+1);
    threads_.emplace_back(new muduo::Thread(
          std::bind(&ThreadPool::runInThread, this), name_+id));   如果回调和任务函数都注册成功,则执行注册的函数和任务函数
    threads_[i]->start();  调用thread对象里面start
  }
  if (numThreads == 0 && threadInitCallback_)
  {
    threadInitCallback_();   执行注册回调
  }
}


void ThreadPool::stop()
{
  {
  MutexLockGuard lock(mutex_);  
  running_ = false;
  notEmpty_.notifyAll(); // 唤醒所有线程 如果返回异常则断言
  }
  for (auto& thr : threads_)
  {
    thr->join();  等待所有线程结束
  }
}

size_t ThreadPool::queueSize() const
{
  MutexLockGuard lock(mutex_);
  return queue_.size();
}
返回队列的长度

void ThreadPool::run(Task task)
{
  if (threads_.empty())
  {
    task();
  }
  else
  {
    MutexLockGuard lock(mutex_);
    while (isFull())
    {
      notFull_.wait();
    }
    assert(!isFull());

    queue_.push_back(std::move(task));
    notEmpty_.notify();
  }
}

执行,执行检查是否为空 为空则执行任务函数

如果不为空,则检查是否队列已满 满了则等待唤醒

如果不为空且不满,则将任务移动到队列中,全部唤醒

ThreadPool::Task ThreadPool::take()
{
  MutexLockGuard lock(mutex_);
  // always use a while-loop, due to spurious wakeup
  while (queue_.empty() && running_)
  {
    notEmpty_.wait();
  }
  Task task;
  if (!queue_.empty())
  {
    task = queue_.front();
    queue_.pop_front();
    if (maxQueueSize_ > 0)
    {
      notFull_.notify();
    }
  }
  return task;
}

执行任务,如果队列不为空并在执行状态,则持续等待

带为空时,或者未执行时,
从头部弹出一个唤醒执行,最后返回task函数

bool ThreadPool::isFull() const
{
  mutex_.assertLocked();
  return maxQueueSize_ > 0 && queue_.size() >= maxQueueSize_;
}
检查队列的长度是否已经超出了最大设定长度

void ThreadPool::runInThread()
{
  try
  {
    if (threadInitCallback_)
    {
      threadInitCallback_();
    }
    while (running_)
    {
      Task task(take());
      if (task)
      {
        task();
      }
    }
  }
  catch (const Exception& ex)
  {
    fprintf(stderr, "exception caught in ThreadPool %s\n", name_.c_str());
    fprintf(stderr, "reason: %s\n", ex.what());
    fprintf(stderr, "stack trace: %s\n", ex.stackTrace());
    abort();
  }
  catch (const std::exception& ex)
  {
    fprintf(stderr, "exception caught in ThreadPool %s\n", name_.c_str());
    fprintf(stderr, "reason: %s\n", ex.what());
    abort();
  }
  catch (...)
  {
    fprintf(stderr, "unknown exception caught in ThreadPool %s\n", name_.c_str());
    throw; // rethrow
  }
}
执行线程,执行take和task




